<?xml version="1.0"?>
<doc>
    <assembly>
        <name>kasuNhentaiCS.Json</name>
    </assembly>
    <members>
        <member name="T:kasuNhentaiCS.Json._selector">
            <summary>
            Waoh how did you find this? <br/>
            this is illegal!
            </summary>
        </member>
        <member name="P:kasuNhentaiCS.Json._selector.data">
            <summary>
            Get the <see cref="T:System.Text.Json.JsonElement"/> data.
            </summary>
            <value></value>
        </member>
        <member name="P:kasuNhentaiCS.Json._selector.count">
            <summary>
            Get the total length of the array.
            </summary>
            <value></value>
        </member>
        <member name="T:kasuNhentaiCS.Json.JDO">
            <summary>
            Its a short version for <see cref="T:System.Text.Json.JsonDocumentOptions"/>. <br/>
            Provides options to be used with <see cref="T:System.Text.Json.JsonSerializer"/> or <see cref="T:System.Text.Json.JsonDocument"/>
            </summary>
        </member>
        <member name="P:kasuNhentaiCS.Json.JDO.AllowTrailingCommas">
            <summary>
            Gets or sets a value that indicates whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being read.
            </summary>
            <returns><see langword="true"/> if an extra comma at the end of a list of JSON values in an object or array is allowed; otherwise, <see langword="false"/>. Default is <see langword="false"/></returns>
        </member>
        <member name="P:kasuNhentaiCS.Json.JDO.CommentHandling">
            <summary>
            Gets or sets a value that determines how the JsonDocument handles comments when reading through the JSON data.
            </summary>
            <returns>One of the enumeration values that indicates how comments are handled.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="P:kasuNhentaiCS.Json.JDO.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when parsing JSON data, with the default (that is, 0) indicating a maximum depth of 64.
            </summary>
            <returns>The maximum depth allowed when parsing JSON data.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="T:kasuNhentaiCS.Json.JsonDeserializer">
            <summary>
            Json parser. <br/>
            by: https://github.com/IchimakiKasura
            </summary>
        </member>
        <member name="M:kasuNhentaiCS.Json.JsonDeserializer.#ctor(System.String,kasuNhentaiCS.Json.JDO)">
            <summary>
            It parses the json file to access its properties by using a <see cref="M:kasuNhentaiCS.Json.JsonDeserializer.selector(System.String)"/>.
            </summary>
            <param name="SerializedJson">Serialized Object here or an Object in a string format.</param>
            <param name="options">Provides the ability for the user to define custom behavior when parsing JSON to create a <see cref="T:System.Text.Json.JsonDocument"/></param>
        </member>
        <member name="M:kasuNhentaiCS.Json.JsonDeserializer.selector(System.String)">
            <summary>
            Selector, It's kinda like the html selector "div>a>span"
            </summary>
            <example> parseData.selector("array:2>object>string") </example>
            <param name="selector">location of where you want to get idk. <br/>
            example: "sample>yo>epic"</param>
            <returns><see cref="T:System.Text.Json.JsonElement"/> or <see cref="T:System.String"/> or <see cref="T:System.Int32"/></returns>
        </member>
        <member name="M:kasuNhentaiCS.Json.JsonDeserializer.rawText">
            <summary>
            Gets a string that represents the original input data backing this value.
            </summary>
            <returns><see cref="M:System.Text.Json.JsonElement.GetRawText"/></returns>
        </member>
        <member name="M:kasuNhentaiCS.Json.JsonDeserializer.serializeObj(System.Object,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Converts the value of a specified type into a JSON string.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="options">Provides options to be used with <see cref="T:System.Text.Json.JsonSerializer"/>.</param>
            <returns>A JSON string representation of the value.</returns>
        </member>
        <member name="M:kasuNhentaiCS.Json.JsonDeserializer.serializeObjAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
            Asynchronously converts a value of a type specified by a generic type parameter to UTF-8 encoded JSON text and writes it to a stream.
            </summary>
            <param name="stream">The UTF-8 stream to write to.</param>
            <param name="value">The value to convert.</param>
            <param name="options">Provides options to be used with <see cref="T:System.Text.Json.JsonSerializer"/>.</param>
            <param name="InputType">The type of the value to convert.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns>A task that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:kasuNhentaiCS.Json.JsonDeserializer.deserializeObj(System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>
            [selector alternative] <br/>
            Parse a string Json into an object.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="options">Provides options to be used with <see cref="T:System.Text.Json.JsonSerializer"/>.</param>
            <returns>Properties of the given JSON string</returns>
        </member>
        <member name="M:kasuNhentaiCS.Json.JsonDeserializer.deserializeObjAsync(System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>
            [selector alternative] <br/>
             (ASYNC) Parse a string Json into an object.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="options">Provides options to be used with <see cref="T:System.Text.Json.JsonSerializer"/>.</param>
            <returns>Properties of the given JSON string</returns>
        </member>
    </members>
</doc>
